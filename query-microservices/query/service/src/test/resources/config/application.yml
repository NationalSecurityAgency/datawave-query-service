spring:
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration

  security:
    user.password: passwordNotUsed
    datawave:
      jwt.ttl: 3600
      issuers-required: true
      enforce-allowed-callers: false
      allowed-callers:
        - "cn=test keystore, ou=my department, o=my company, st=some-state, c=us<cn=test keystore, ou=my department, o=my company, st=some-state, c=us>"

hazelcast.client.enabled: false

warehouse:
  accumulo:
    zookeepers: 'localhost:2181'
    instanceName: 'my-instance-01'
    username: 'root'
    password: 'password'
  statsd:
    host: localhost
    port: 8125
  tables:
    shard:
      name: 'shard'
    index:
      name: 'shardIndex'
    reverseIndex:
      name: 'shardReverseIndex'
    dateIndex:
      name: 'dateIndex'
    metadata:
      name: 'DatawaveMetadata'
    model:
      name: 'DatawaveMetadata'
  defaults:
    queryThreads: 100
    indexLookupThreads: 100
    dateIndexThreads: 20
    fullTableScanEnabled: false
    baseIteratorPriority: 100
    maxIndexScanTimeMillis: 31536000000
    eventPerDayThreshold: 40000
    shardsPerDayThreshold: 20
    maxTermThreshold: 2000
    maxDepthThreshold: 2000
    maxUnfieldedExpansionThreshold: 50
    maxValueExpansionThreshold: 50
    maxOrExpansionThreshold: 500
    maxOrRangeThreshold: 10
    maxOrExpansionFstThreshold: 750
    maxFieldIndexRangeSplit: 16
    maxIvaratorSources: 20
    maxEvaluationPipelines: 16
    maxPipelineCachedResults: 16
    hdfsSiteConfigURLs: 'file:///etc/hadoop/conf/core-site.xml,file:///etc/hadoop/conf/hdfs-site.xml'
    ivaratorFstHdfsBaseURIs: 'hdfs:///IvaratorCache'
    ivaratorCacheBufferSize: 10000
    ivaratorMaxOpenFiles: 100
    ivaratorCacheScanPersistThreshold: 100000
    ivaratorCacheScanTimeoutMinutes: 60
    modelName: 'DATAWAVE'

query:
  storage:
    backend:
      LOCAL
    lockManager:
      LOCAL
    syncStorage:
      true
    sendNotifications:
      true

  logic:
    factory:
      enabled: true
      # Uncomment the following line to override the query logic beans to load
      xmlBeansPath: "classpath:MyTestQueryLogicFactory.xml"

      # The max page size that a user can request.  0 turns off this feature
      maxPageSize: 10000

      # The number of bytes at which a page will be returned, event if the pagesize has not been reached.  0 turns off this feature
      pageByteTrigger: 0
    logics:
      BaseEventQuery:
        accumuloPassword: ${warehouse.accumulo.password}
        tableName: ${warehouse.tables.shard.name}
        dateIndexTableName: ${warehouse.tables.dateIndex.name}
        defaultDateTypeName: "EVENT"
        metadataTableName: ${warehouse.tables.metadata.name}
        indexTableName: ${warehouse.tables.index.name}
        reverseIndexTableName: ${warehouse.tables.reverseIndex.name}
        maxResults: -1
        queryThreads: ${warehouse.defaults.queryThreads}
        indexLookupThreads: ${warehouse.defaults.indexLookupThreads}
        dateIndexThreads: ${warehouse.defaults.dateIndexThreads}
        fullTableScanEnabled: ${warehouse.defaults.fullTableScanEnabled}
        includeDataTypeAsField: false
        disableIndexOnlyDocuments: false
        indexOnlyFilterFunctionsEnabled: false
        includeHierarchyFields: false
        hierarchyFieldOptions: ""
        baseIteratorPriority: ${warehouse.defaults.baseIteratorPriority}
        maxIndexScanTimeMillis: ${warehouse.defaults.maxIndexScanTimeMillis}
        collapseUids: false
        collapseUidsThreshold: -1
        useEnrichers: true
        contentFieldNames:
          - 'CONTENT'
        realmSuffixExclusionPatterns: '<value><.*>$</value>'
        minimumSelectivity: .2
        enricherClassNames: '<value>datawave.query.enrich.DatawaveTermFrequencyEnricher</value>'
        useFilters: false
        filterClassNames: ''
        filterOptions: ''
        auditType: "NONE"
        logicDescription: "Retrieve sharded events/documents, leveraging the global index tables as needed"
        eventPerDayThreshold: ${warehouse.defaults.eventPerDayThreshold}
        shardsPerDayThreshold: ${warehouse.defaults.shardsPerDayThreshold}
        maxTermThreshold: ${warehouse.defaults.maxTermThreshold}
        maxDepthThreshold: ${warehouse.defaults.maxDepthThreshold}
        maxUnfieldedExpansionThreshold: ${warehouse.defaults.maxUnfieldedExpansionThreshold}
        maxValueExpansionThreshold: ${warehouse.defaults.maxValueExpansionThreshold}
        maxOrExpansionThreshold: ${warehouse.defaults.maxOrExpansionThreshold}
        maxOrRangeThreshold: ${warehouse.defaults.maxOrRangeThreshold}
        maxOrExpansionFstThreshold: ${warehouse.defaults.maxOrExpansionFstThreshold}
        maxFieldIndexRangeSplit: ${warehouse.defaults.maxFieldIndexRangeSplit}
        maxIvaratorSources: ${warehouse.defaults.maxIvaratorSources}
        maxEvaluationPipelines: ${warehouse.defaults.maxEvaluationPipelines}
        maxPipelineCachedResults: ${warehouse.defaults.maxPipelineCachedResults}
        hdfsSiteConfigURLs: ${warehouse.defaults.hdfsSiteConfigURLs}
        zookeeperConfig: ${warehouse.accumulo.zookeepers}
        ivaratorCacheDirConfigs: ''
        ivaratorFstHdfsBaseURIs: ${warehouse.accumulo.ivaratorFstHdfsBaseURIs}
        ivaratorCacheBufferSize: ${warehouse.defaults.ivaratorCacheBufferSize}
        ivaratorMaxOpenFiles: ${warehouse.defaults.ivaratorMaxOpenFiles}
        ivaratorCacheScanPersistThreshold: ${warehouse.defaults.ivaratorCacheScanPersistThreshold}
        ivaratorCacheScanTimeoutMinutes: ${warehouse.defaults.ivaratorCacheScanTimeoutMinutes}
        eventQueryDataDecorators: ''
        modelTableName: ${warehouse.tables.model.name}
        modelName: ${warehouse.defaults.modelName}
        querySyntaxParsers: |-
          <entry key="JEXL">
            <null/>
          </entry>
          <entry key="LUCENE" value-ref="LuceneToJexlQueryParser" />
          <entry key="LUCENE-UUID" value-ref="LuceneToJexlUUIDQueryParser" />
          <entry key="TOKENIZED-LUCENE" value-ref="TokenizedLuceneToJexlQueryParser" />
          <!-- JEXL is the default Jexl query syntax -->
        sendTimingToStatsd: false
        collectQueryMetrics: true
        logTimingDetails: false
        statsdHost: ${warehouse.statsd.host}
        statsdPort: ${warehouse.statsd.port}
        evaluationOnlyFields: ""

server:
  port: 0
  non-secure-port: 0
  servlet.context-path: /query
  ssl:
    client-auth: NEED
    trust-store: 'classpath:testCA.p12'
    trust-store-type: PKCS12
    trust-store-password: 'ChangeIt'
    key-store: 'classpath:testServer.p12'
    key-store-type: PKCS12
    key-store-password: 'ChangeIt'
  outbound-ssl:
    key-store: ${server.ssl.key-store}
    key-store-password: ${server.ssl.key-store-password}
    key-store-type: ${server.ssl.key-store-type}
    trust-store: ${server.ssl.trust-store}
    trust-store-password: ${server.ssl.trust-store-password}
    trust-store-type: ${server.ssl.trust-store-type}

management:
  endpoints:
    web:
      base-path: "/mgmt"

logging:
  level:
    datawave.microservice: DEBUG
    io.undertow.request: FATAL

audit-client:
  discovery:
    enabled: false
  uri: '${AUDIT_SERVER_URL:http://localhost:11111/audit}'
